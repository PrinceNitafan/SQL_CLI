// Table Creations


CREATE TABLE business (
        business_id CHAR(22) PRIMARY KEY,
        name VARCHAR(60) NOT NULL,
        address VARCHAR(75),
        city VARCHAR(30) NOT NULL,
        postal_code VARCHAR(7),
        stars DECIMAL(2, 1) CHECK(stars >= 1 AND stars <= 5),
        review_count INTEGER DEFAULT 0 CHECK(review_count >= 0)
);


CREATE TABLE user_yelp (
        user_id CHAR(22) PRIMARY KEY,
        name VARCHAR(35) NOT NULL,
        review_count INTEGER DEFAULT 0 CHECK (review_count >= 0),
        yelping_since DATETIME NOT NULL DEFAULT GETDATE(),
        useful INTEGER DEFAULT 0 CHECK(useful >= 0),
        funny INTEGER DEFAULT 0 CHECK(funny >= 0),
        cool INTEGER DEFAULT 0 CHECK(cool >= 0),
        fans INTEGER DEFAULT 0 CHECK(fans >= 0),
        average_stars DECIMAL(3,2) CHECK(average_stars >= 1 AND average_stars <= 5)
);


CREATE TABLE checkin (
        checkin_id INTEGER PRIMARY KEY,
        business_id CHAR(22) NOT NULL FOREIGN KEY REFERENCES business(business_id),
        date DATETIME NOT NULL DEFAULT GETDATE()
);


CREATE TABLE tip (
        tip_id INTEGER PRIMARY KEY,
        user_id CHAR(22) NOT NULL FOREIGN KEY REFERENCES user_yelp(user_id),
        business_id CHAR(22) NOT NULL FOREIGN KEY REFERENCES business(business_id),
        date DATETIME NOT NULL DEFAULT GETDATE(),
        compliment_count INTEGER DEFAULT 0 CHECK(compliment_count >= 0)
);


CREATE TABLE friendship (
        user_id CHAR(22) FOREIGN KEY REFERENCES user_yelp(user_id),
        friend CHAR(22) FOREIGN KEY REFERENCES user_yelp(user_id),
        PRIMARY KEY(user_id, friend)
);


CREATE TABLE review (
        review_id CHAR(22) PRIMARY KEY,
        user_id CHAR(22) NOT NULL FOREIGN KEY REFERENCES user_yelp(user_id),
        business_id CHAR(22) NOT NULL FOREIGN KEY REFERENCES business(business_id),
        stars INTEGER NOT NULL CHECK (stars >= 1 AND stars <= 5),
        useful INTEGER DEFAULT 0 CHECK(useful >= 0),
        funny INTEGER DEFAULT 0 CHECK(funny >= 0),
        cool INTEGER DEFAULT 0 CHECK(cool >= 0), 
        date DATETIME DEFAULT GETDATE()
);






// Insertions

BULK INSERT dbo.business 
FROM 'd:\userdata\cmpt354YelpA3\business.csv' 
WITH (fieldterminator=',', rowterminator='\n', firstrow=2)
GO

BULK INSERT dbo.user_yelp 
FROM 'd:\userdata\cmpt354YelpA3\user_yelp.csv' 
WITH (fieldterminator=',', rowterminator='\n', firstrow=2)
GO


BULK INSERT dbo.checkin 
FROM 'd:\userdata\cmpt354YelpA3\checkin.csv' 
WITH (fieldterminator=',', rowterminator='\n', firstrow=2)
GO


BULK INSERT dbo.friendship 
FROM 'd:\userdata\cmpt354YelpA3\friendship.csv' 
WITH (fieldterminator=',', rowterminator='\n', firstrow=2)
GO


BULK INSERT dbo.review 
FROM 'd:\userdata\cmpt354YelpA3\review.csv' 
WITH (fieldterminator=',', rowterminator='\n', firstrow=2)
GO


BULK INSERT dbo.tip 
FROM 'd:\userdata\cmpt354YelpA3\tip.csv' 
WITH (fieldterminator=',', rowterminator='\n', firstrow=2)
GO


Note: the order of bulk insert queries (first to last): dbo.business, dbo.user_yelp, dbo.checkin, dbo.friendship, dbo.review, dbo.tip
